

-- make sure numbers table has ndex = 0!

/*
   Appointment Search Wizard Function
   ----------------------------------
   This function returns a calendar with the dateTimes at the specified slot interval.
   Dt is the appointment datetime
   nDex is the number of minutes to add to midnight to arrive at the dt.datetime
   skey is the day number of the week for the current date, note that medinformatix assumes sunday is 0, not 1
*/

   -- don't let the next day start before the start time


   -- if they're searching for today's date make sure the time is > right now, closest to the half hour !!!JRPF080213

/**** example to build templates ****/

-- precalculate these vars so we only need to do it once

-- store the master calendar !!!JRPF080213

-- we need to know the allotted time for the reason

-- if searchtype is null, look for ptype in mwrtempl. if no ptype use ''


   -- if null set to all

-- store the possible and valid book/dept/facility combinations

   --8.18.2014 account for book start / end times --8.18.2014
   --10.24.2014 account for null/1900-01-01 enddates when startdates are valid values

   -- where it's not closed in mwsched

                     --  AND mws.dept   = mwb.department -- [B-001273]

   -- where there's a book schedule template

   -- where the reason's valid for the skey.

   -- where there isn't a reason schedule template with start/endtimes that close the reason for this specific date or skey

    -- if there's a specific template entry for the reason use that else the skey.

   -- and there isn't a book schedule template that closes it for the current day

 -- only insert books that are open "today" w/reasons that can be searched today
 -- books without templates and books with a closed status in mwsched for today will not be included
 -- also, if the reason code is filled out for this department in mwrtempl but there aren't any valid times
 -- we consider the reason closed/unusable by this book/facility/department
 -- example start1 = 0000A, end1 = 0000A




/* store the book schedule template */

      -- if aligntostarttime is true then the appt needs to fit within a boundary based on the startn/endn time instead of every n minutes from midnight

      -- can the appointment fit in this block?

      -- if this isn't 0 then the reason needs to be aligned to a specific boundary within the current start/end times

      -- this appt doesn't need to align to the start/end times

      -- can the appointment fit in this block?

                                         ) -- does this slot fall on a specific boundary (only if @slots is filled out)

                                         -- [B-002032] if there's a specific template we need to honor it even if it falls outside the time range searched



                                         -- where there's a reason schedule template for this book/department.

                                         --/* copy over [all] book reason schedule templates if the books in the list are missing one */



                                         -- where there isn't a reason schedule template for the specific book

                                         -- where there is an [all] template for the skey # available !!!JR {InEff}

                                         -- store the reason code "template", the validstart/validend and preferred times in the book.

                                         -- [B-002032] if there's a reason template on a specific day which has start/end times outside the search range then we need to throw out
                                         -- open slots generated by the reason schedule template

                                         -- if there was a book template entered with today's date we need to remove any skey# slots that would be duplicates

                                         -- now mark any remaining book schedule template slots as closed since the overridden day didn't contain them

                                         -- perform the same logic for the reason schedule template

                                         -- any book template slots that are closed by the reason schedule template need to be closed

                                         -- and of the remaining book schedule slots that aren't valid or preferred for the reason have to be closed

                                         -- if there are still open slots, make sure they're not booked in mwappts aready

                                         --INT-07072014



                                         -- 7.29.2014 locks can be held 1-exclusive (they only apply to this user) or 2-everyone


                                         -- AND SL.adatetime     = w.apptdateslot
                                         --[B-002050] - search next wasn't working with user scope slot reservations (id_locklevel=2)

                                         -- store the final results in the availablemap which gets returned by the function

                                         -- generate a calendar based on the slot size so we only book valid slot times and can still check
                                         -- if any of our appointments span the open/closed times of the current book.


                                         -- where there aren't any closed slots between the slot start and stop time.


                                         ------------------------------
                                         -- Return Results To Caller --
                                         -- All available appt slots --
                                         ------------------------------

/*
   Appointment Search Wizard
   Hospital Downloads Module
   Dashboard Reports
*/

/*

     Stored Procedure For Search Wizard

     -------------------------------------------------------------------
     Main Appointment Search Routine Called By Medinformatix Application
     -------------------------------------------------------------------

    MOD HX
    -------------------------------------------------------------------
	03.08.2016 - [B-002050] search next wasn't working with user scoped slot reservations
	03.03.2016 - added lag minutes to reasons that start on the following day (was 24 hours exactly)
    08.12.2015 - @sortByFacility default changed to 0
    07.13.2015 - fixed bug with sort order
    07.02.2015 - added @sortByFacility
    12.19.2014 - removed caching logic
               - added search stats
    11.24.2014 - added runid parm to mituil_SearchApptComp
    11.23.2014 - fixed bug with caching that pulled incorrect first available slot from __MSF_displayResults
    10.29.2014 - updated parse term logic to reduce cpu footprint (PV)
    08.04.2014 - added stats to cache
    07.29.2014 - changed book linking logic on multi-day searches
               - added stats update to avoid cases where stale statistics ruined execution plans
               - now updates any existing slot locks that haven't been deleted yet so it can hold them for the user
    05.29.2014 - added ADATEENDTIME to CLAPPTSLOTLOCK, fixed bug w/ allotted amount
    05.07.2014 - lag adjust logic altered

*/


-- each search has it's own id so we can manage the slots it locks

-- store the start time so we can exit after the max @timelimit has been reached.

-- store the number of search terms and iterations of the search


   /*
     ___                    ___                  _      _____
    | _ \__ _ _ _ ___ ___  / __| ___ __ _ _ _ __| |_   |_   _|__ _ _ _ __  ___
    |  _/ _` | '_(_-</ -_) \__ \/ -_) _` | '_/ _| ' \    | |/ -_) '_| '  \(_-<
    |_| \__,_|_| /__/\___| |___/\___\__,_|_| \__|_||_|   |_|\___|_| |_|_|_/__/

   */



   -- used later on when we stitch multireason appointments together

   -- idx, these are the same facilities in the same reason search

 /************************************************************************************************************************************************************


    __  __      _        ___                  _      ___          _   _
   |  \/  |__ _(_)_ _   / __| ___ __ _ _ _ __| |_   | _ \___ _  _| |_(_)_ _  ___
   | |\/| / _` | | ' \  \__ \/ -_) _` | '_/ _| ' \  |   / _ \ || |  _| | ' \/ -_)
   |_|  |_\__,_|_|_||_| |___/\___\__,_|_| \__|_||_| |_|_\___/\_,_|\__|_|_||_\___|


  ************************************************************************************************************************************************************/


   -- loop through the days

        -- the unique index in the #__MSF_searchTerms table. this corresponds to the 1-8 reason codes.

        -- iterate through the reasons/facilities and store search results

                 -- get the data for the current search term

                     -- we need to make sure the appointment they want to search for is one of the validdays selected on the front end
                     -- it's not just the current @day, it's startdatetime+@day+daynumber for the reason.

                     -- start/stop times for the given day because we can't inline these to a stored procedure call

                          -- cap

                          /* APPT SEARCH, this returns all open slots based on mwappts and current searchterm/facility

                                  _   ___ ___ _____   ___ ___   _   ___  ___ _  _
                                 /_\ | _ \ _ \_   _| / __| __| /_\ | _ \/ __| || |
                                / _ \|  _/  _/ | |   \__ \ _| / _ \|   / (__| __ |
                               /_/ \_\_| |_|   |_|   |___/___/_/ \_\_|_\\___|_||_|

                          */


            /* BREAK DAY LOOP

               We searched all facilities for the current reason
               If we didn't find anything, bail on the rest of the reasons for today.
                ___ ___ ___   _   _  __  ___   ___   __  _    ___   ___  ___
               | _ ) _ \ __| /_\ | |/ / |   \ /_\ \ / / | |  / _ \ / _ \| _ \
               | _ \   / _| / _ \| ' <  | |) / _ \ V /  | |_| (_) | (_) |  _/
               |___/_|_\___/_/ \_\_|\_\ |___/_/ \_\_|   |____\___/ \___/|_|

            */

           -- we found something so go to the next search term (reason 1-8)


          -- every idx# (reason) must be represented for each dayidx or the entire day should be omitted from the results

          /*
             Appointment Chain Routine

             We have a map of available appts/days/reasons for the day, now build a linked list of appointments
             and store it as an appointment set.
          */

        -- 05.29.2014 - added allotted int
          -- this table will hold our final results

        -- avoid stale stats


        -- if we only have one reason we can avoid the slower query below

               -- 05.29.2014 - added allotted int

/* search results and terms for reason #2 */

            /* if appt day # > prev appt the start time is exactly 24 hours */

                                     -- else the start time is the first available appt time based on lag, adjustable lag and layover

											      /* last appointment lower boundary */


                               /* adjustable lag time */

                            /* last appointment upper boundary */

                               /* adjustable lag time */

                            /* layover minutes */


                            /* has to be at the same facility if it's on the same day unless they choose the book manually */

                            /* next appt needs to be in the same book as the appt before it if they don't choose the book manually and it's same day. */

                            /* no lagminutes between appts, book at same time as prev appt */

                            /* has to be at the same facility if it's on the same day unless they choose the book manually */

                            /* next appt needs to be in the same book as the appt before it if they don't choose the book manually */

                            /* search results and terms for reason #3 */



                            /* if appt day # > prev appt the start time is exactly 24 hours */

                            /* last appointment lower boundary */

                               /* adjustable lag time */

                            /* last appointment upper boundary */

                               /* adjustable lag time */

                            /* layover minutes */


                            /* has to be at the same facility if it's on the same day unless they choose the book manually */

                            /* next appt needs to be in the same book as the appt before it if they don't choose the book manually and it's same day. */

                            /* no lagminutes between appts, book at same time as prev appt */

                            /* has to be at the same facility if it's on the same day unless they choose the book manually */

                            /* next appt needs to be in the same book as the appt before it if they don't choose the book manually */

                            /* search results and terms for reason #4 */

                            /* if appt day # > prev appt the start time is exactly 24 hours */

                            /* last appointment lower boundary */

                               /* adjustable lag time */

                            /* last appointment upper boundary */

                               /* adjustable lag time */

                            /* layover minutes */

                            /* has to be at the same facility if it's on the same day unless they choose the book manually */

                            /* next appt needs to be in the same book as the appt before it if they don't choose the book manually and it's same day. */

                            /* no lagminutes between appts, book at same time as prev appt */

                            /* has to be at the same facility if it's on the same day unless they choose the book manually */

                            /* next appt needs to be in the same book as the appt before it if they don't choose the book manually */

                            /* search results and terms for reason #5 */

                            /* if appt day # > prev appt the start time is exactly 24 hours */

                            /* last appointment lower boundary */

                               /* adjustable lag time */

                            /* last appointment upper boundary */

                               /* adjustable lag time */

                            /* layover minutes */


                            /* has to be at the same facility if it's on the same day unless they choose the book manually */

                            /* next appt needs to be in the same book as the appt before it if they don't choose the book manually and it's same day. */

                            /* no lagminutes between appts, book at same time as prev appt */

                            /* has to be at the same facility if it's on the same day unless they choose the book manually */

                            /* next appt needs to be in the same book as the appt before it if they don't choose the book manually */

                            /* search results and terms for reason #6 */


                            /* if appt day # > prev appt the start time is exactly 24 hours */

                            /* last appointment lower boundary */

                               /* adjustable lag time */

                            /* last appointment upper boundary */

                               /* adjustable lag time */

                            /* layover minutes */


                            /* has to be at the same facility if it's on the same day unless they choose the book manually */

                            /* next appt needs to be in the same book as the appt before it if they don't choose the book manually and it's same day. */


                                         /* no lagminutes between appts, book at same time as prev appt */

                           /* has to be at the same facility if it's on the same day unless they choose the book manually */


                           /* next appt needs to be in the same book as the appt before it if they don't choose the book manually */

/* search results and terms for reason #7 */


            /* if appt day # > prev appt the start time is exactly 24 hours */

                                     -- else the start time is the first available appt time based on lag, adjustable lag and layover

											      /* last appointment lower boundary */

												                             /* adjustable lag time */

                                                  /* last appointment upper boundary */

												                             /* adjustable lag time */


																			  /* layover minutes */

                                                  /* has to be at the same facility if it's on the same day unless they choose the book manually */

                                                  /* next appt needs to be in the same book as the appt before it if they don't choose the book manually and it's same day. */

                                         /* no lagminutes between appts, book at same time as prev appt */

                           /* has to be at the same facility if it's on the same day unless they choose the book manually */

                           /* next appt needs to be in the same book as the appt before it if they don't choose the book manually */
                           a

            /* if appt day # > prev appt the start time is exactly 24 hours */

                                     -- else the start time is the first available appt time based on lag, adjustable lag and layover

											      /* last appointment lower boundary */

												                             /* adjustable lag time */

                                                  /* last appointment upper boundary */

												                             /* adjustable lag time */


																			  /* layover minutes */


                                                  /* has to be at the same facility if it's on the same day unless they choose the book manually */


                                                  /* next appt needs to be in the same book as the appt before it if they don't choose the book manually and it's same day. */

                                         /* no lagminutes between appts, book at same time as prev appt */

                           /* has to be at the same facility if it's on the same day unless they choose the book manually */

                           /* next appt needs to be in the same book as the appt before it if they don't choose the book manually */

        -- pad setnumber with leading zeros

          -- delete any sets that are missing full results

       -- 05.29.2014 - added adateendtime
       -- all possible search results are here in the #__MSF_chain column, we can store these as potential choices right now...
 -- mm/dd/yyyy or medinformatix won't book it

        -- if this is filled out it will display the first occurance on the front end to the user in a pop up dialog


      -- remove any duplicates. we only want first choice per deparment/slot/date

      -- exit the day here if the numchoices has been met.

      -- if there's a timelimit and that limit's been exceeded, exit the search and just return what we've found

      -- if we have results and the search has run longer than the result cap, stop searching and return what we've found



/* RESULTS
     oooooooooo  ooooooooooo  oooooooo8 ooooo  oooo ooooo    ooooooooooo  oooooooo8
     888    888  888    88  888         888    88   888     88  888  88 888
     888oooo88   888ooo8     888oooooo  888    88   888         888      888oooooo
     888  88o    888    oo          888 888    88   888      o  888             888
     o888o  88o8 o888ooo8888 o88oooo888   888oo88   o888ooooo88 o888o    o88oooo888
*/


 -- if we have anything to show to the user, here it is


    -- [remove duplicates and lock slots]

       -- it's possible that the slots we found have already been closed by other searches since we've been holding them
       -- in a table variable outside a protected isolation level

       -- 05.29.2014 - now checks adate against the slot range rather than the slot itself

            --AND CAST(r.[Adate] + ' ' + r.[Time] as datetime) BETWEEN ADATETIME AND ADATEENDTIME
			--[B-00250] search next wasn't working user scoped slot reservations (id_locklevel=2)


         -- 05.29.2014 - added adateendtime

           -- 05.29.2014 - added adateendtime

-- [display order]

-- order by reason then slot


    -- there weren't any results, provide a message to the user

      -- and ISDATE(t.skeydate) = case when LEN(mwt.skey) > 1  then 1 else 0 end

   -- IF SKEY IS A DATE MAKE SURE IT'S VALID


/*
   03.18.2015
   ==================================================
      -

   08.15.2014
   ==================================================
          - added workaround for sql 2014 bug

   02.01.2014
   ==================================================
          - this procedure no longer gets called by the trigger, so the parameters have been removed
          - it's only used in the initial population of the template tables
   01.17.2014
   ==================================================
   RCT035 - Added blank / all book templates to insert

   Link the reason template combinations

*/

-- delete template data

-- store reason template links

       --and mwt.skey = case when len(mwt.skey) > 1 then t.skeytxt else t.skey end
       --AND ISDATE(t.skeydate) = case when LEN(mwt.skey) > 1  then 1 else 0 end -- sql 2014 oem crashes when isdate() is used in a join or where clause like this


   -- store reason template links where books are [all]

         --and mwt.skey = case when len(mwt.skey) > 1 then t.skeytxt else t.skey end
         --AND ISDATE(t.skeydate) = case when LEN(mwt.skey) > 1  then 1 else 0 end -- sql 2014 oem crashes when isdate() is used in a join or where clause like this


/*
   Cache the mwreason validstart/end and preferred times
*/


 /*
   Trigger Objects
   ===============

*/

-- if add, insert, update, delete a book template [MWTEMPL]

    -- log as update

    -- log as insert

    -- log as delete

   -- get rid of any links to the mibooktemplatelink table, we're going to rebuild all of them.

   -- insert new rows in to mitemplatecomp.

-- log as update

    -- log as insert

    -- log as delete

 -- if it's an update or delete

 -- it's an insert

    -- get rid of anything for this particular reason

      -- create unique rows in reasoncomp table

      -- rebuild specific links in template


/*
    All reason, reasonschedule and book template times have to be a valid HHMM(A/P) format or they will be converted to NULL (mwtempl/mwrtempl/mwreason)
    All skeys must be 0,1,2,3,4,5,6 or a date expressed in the format YYMMDD or the row is deleted (MWTEMPL, MWRTEMPL)
*/

  -- clean up any issues with the reason schedule template.

  -- get rid of any bad skeys that aren't #'s or dates in mwtempl and mwrtempl

  -- there can't be any blank start/end times, they have to be nulls or 0000A

  -- there can't be any blank start/end times, they have to be nulls or 0000A

 -- there can't be any blank prefstart/prefend times, they have to be nulls or 0000A

   -- there can't be any blank prefstart/prefend times, they have to be nulls or 0000A

 -- 4.29.2013
 -- there can't be any blank start/end times, they have to be nulls or 0000A

  -- there can't be any blank start/end times, they have to be nulls or 0000A


 /*
    Rebuild the cached template data.
*/

    -- these can be huge tables, can change to delete on small sites

    -- only required if the template dates are invalid, this cleans that up
    --exec('exec [miUtil_RunCleanUpMalformedTemplateData];')

    -- book template and reason schedule template initial setup


-- this procedure was removed
I
   -- store the number of search terms and iterations of the search

      /*
       ___                    ___                  _      _____
      | _ \__ _ _ _ ___ ___  / __| ___ __ _ _ _ __| |_   |_   _|__ _ _ _ __  ___
      |  _/ _` | '_(_-</ -_) \__ \/ -_) _` | '_/ _| ' \    | |/ -_) '_| '  \(_-<
      |_| \__,_|_| /__/\___| |___/\___\__,_|_| \__|_||_|   |_|\___|_| |_|_|_/__/

      */

         -- check if the facility parameter contains multiple facilities.
         -- if it does we need to use the fn_split function to store the rows in a table
         -- else just put the one facility passed in the table directly

/*
    delete rows from miutil_searchTermCache] when:

   1) firstAvailableDt < today at midnight
    2) it's possible the entry corresponds to something in [miutil_templateChangeLog]
   3) an appt slot opened up within the search range\

   delete rows in [miutil_searchTermLog] when:
   1) they're > 30 days old
*/

   -- get rid of the old search term rows
   -- these hold state if the cache can be used or not, and we keep them for historical purposes
   -- so that


          -- get rid of any entries where there have been template changes


       -- get rid of cached entries if there have been any flagged/tagged appts during search range

                  -- find any flagged appts that may invalidate the cache

      -- take out the trash, these rows are useless now

      --@schedule_uid=N'28f409ad-64af-4804-bb5e-e4fbbc16a47b'
